# develop use dev in the naming
on:
  push:
    branches:
      - develop
    tags:
      - 'v*'
jobs:

  ## part 1
  ### lint the code
  lint-actions:
    uses: ./.github/workflows/lint.yaml

  build:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      sha256: ${{ steps.shasum.outputs.sha256 }}
      dev-build: ${{ steps.dev-version.outputs.dev-build }}
    steps:
      # Get current date for versioning
      - name: Get current date
        id: date
        run: |
          date_form=$(date +'%Y.%m.%d')
          echo "date=${date_form}" >> "$GITHUB_OUTPUT"
      # Create dev version name
      - name: Create Dev version name
        id: dev-version
        run: |
            echo "dev-build=${{steps.date.outputs.date}}dev${{github.run_number}}" >> "$GITHUB_OUTPUT"
      # Checkout Code
      - name: Checkout code
        uses: actions/checkout@v3
      # Install Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.12.2
      # Ensure pip is installed and upgraded
      - name: Ensure pip is installed
        run: |
          python -m ensurepip --upgrade
          python -m pip install --upgrade pip
      # Create pip requirements from pipenv Pipfile
      - name: Pip Requirements file
        run: |
          sudo apt-get install python3-pip
          pip install pipenv requests
          pipenv install
          pipenv run pip freeze > requirements.txt
      # Gather script info from src directory
      - name: Gather Script info for setup
        id: list_scripts
        run: |
          chmod +x ./packaging/scriptsetup.py
          python packaging/scriptsetup.py > scripts.txt
          cat scripts.txt
          scripts=$(cat scripts.txt)
          echo "scripts=${scripts}" >> "$GITHUB_OUTPUT"
      # Template setup.py
      - name: Template setup.py
        uses: cuchi/jinja2-action@v1.2.2
        with:
          template: templates/setup.py.j2
          output_file: setup.py
        env:
          SCRIPTS: ${{ steps.list_scripts.outputs.scripts }}
      # Upload setup.py artifact
      - name: Upload setup.py
        uses: actions/upload-artifact@v4
        with:
          name: setup
          path: setup.py
          retention-days: 1
      # Template setup.cfg
      - name: Template setup.cfg
        uses: cuchi/jinja2-action@v1.2.2
        with:
          template: templates/setup.cfg.j2
          output_file: setup.cfg
        env:
          PACKAGE_VERSION: ${{ github.ref == 'refs/tags/v*' && github.ref_name || steps.dev-version.outputs.dev-build }}
      # Create resource file
      - name: Create resource file
        id: create_resource
        run: |
          chmod +x packaging/pypackage_convert.py
          python packaging/pypackage_convert.py > resources.json
      # Upload resources artifact 
      - name: Upload resources.json
        uses: actions/upload-artifact@v4
        with:
          name: brew-resources
          path: resources.json
          retention-days: 1
      # Package Release
      - name: Package
        run: |
          python3 -m pip install --upgrade build
          python3 -m build
          cd dist
          mv tools-core-*.tar.gz tools-core-${{github.ref_name}}.tar.gz
      # Create Release
      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref == 'refs/tags/v*' && github.ref_name || steps.dev-version.outputs.dev-build }}
          name: Release ${{ github.ref == 'refs/tags/v*' && github.ref_name || steps.dev-version.outputs.dev-build }}
          generate_release_notes: true
          draft: false
          prerelease: false
      # Upload Package to Release
      - name: Upload tar to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          file: dist/*
          tag: ${{ github.ref == 'refs/tags/v*' && github.ref_name || steps.dev-version.outputs.dev-build }}
          overwrite: true
      # SHA sum Package
      - name: SHAsum
        id: shasum
        run: |
          cd dist
          shasum -a 256 tools-core-${{github.ref_name}}.tar.gz > shasum-package-release
          cat shasum-package-release|cut -c1-64
          shasum=$(cat shasum-package-release|cut -c1-64)
          echo "sha256=${shasum}" >> "$GITHUB_OUTPUT"


  update-homebrew:
    name: Update Homebrew
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Checkout Code
      - name: Checkout code
        uses: actions/checkout@v3
      # Install Jinja2
      - name: Install Jinja2
        run: pip install jinja2-cli
      # Download Brew Resource Artifact
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: brew-resources

      # TODO figure out a way to move these to another file. 
      # Create Release based on develop or tag
      # Template Brew Formula for DEVELOP
      - name: Render Jinja2 template
        if: ${{ github.ref == 'refs/heads/develop' }}
        run: jinja2 templates/random-number-dev.rb.j2 -o random-number-dev.rb --format=json resources.json
      # Git push release.json and formula to homebrew repo
      # TODO find a way to use @ in the file name see ant@
      - name: Clone Homebrew
        if: ${{ github.ref == 'refs/heads/develop' }}
        env:
          SHA: ${{ needs.build.outputs.sha256 }}
        run: |
          git config --global user.email "michael@einreinhof.com"
          git config --global user.name "${{ github.actor }}"
          eval `ssh-agent -s`
          ssh-add - <<< '${{ secrets.HOMEBREW_DEPLOY_SSH }}'
          git clone git@github.com:alteredtech/homebrew-test-tap.git homebrew
          cd homebrew
          mkdir -p Formula/tools
          cat ../random-number-dev.rb > Formula/random-number@9.rb
          cat <<EOF > tools/release-dev.json
          {
            "version": "${{needs.build.outputs.dev-build}}",
            "sha256": "$SHA"
          }
          EOF
          git add tools/ Formula/random-number*.rb
          git commit -m 'Another Tools release ${{ github.ref_name }}'
          git push


      # Template Brew Formula for Tag Release
      - name: Render Jinja2 template
        if: startsWith(github.ref, 'refs/tags/v')
        run: jinja2 templates/random-number.rb.j2 -o random-number.rb --format=json resources.json
      # Git push release.json and formula to homebrew repo
      - name: Clone Homebrew
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          SHA: ${{ needs.build.outputs.sha256 }}
        run: |
          git config --global user.email "michael@einreinhof.com"
          git config --global user.name "${{ github.actor }}"
          eval `ssh-agent -s`
          ssh-add - <<< '${{ secrets.HOMEBREW_DEPLOY_SSH }}'
          git clone git@github.com:alteredtech/homebrew-test-tap.git homebrew
          cd homebrew
          mkdir -p Formula
          cat ../random-number.rb > Formula/random-number.rb
          cat <<EOF > tools/release.json
          {
            "version": "${{ github.ref_name }}",
            "sha256": "$SHA"
          }
          EOF
          git add tools/ Formula/random-number*.rb
          git commit -m 'Another Tools release ${{ github.ref_name }}'
          git push


  ### check brew install
  tests:
    name: Test Develop Brew formula
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/tags/*dev*' }}
    steps:
    # Install Homebrew on Linux
    - name: Install Homebrew
      run: |
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        test -d ~/.linuxbrew && eval "$(~/.linuxbrew/bin/brew shellenv)"
        test -d /home/linuxbrew/.linuxbrew && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        echo "eval \"\$($(brew --prefix)/bin/brew shellenv)\"" >> ~/.bashrc
        source ~/.bashrc
    # Tap the formula
    - name: tap brew
      run: |
        brew tap alteredtech/test-tap
    # Install the Formula and output the log to a file
    - name: install formula
      run: |
        brew update && brew install random-number@dev 2>&1 | tee install-${{github.ref_name}}.log
    # Upload install log Artifact
    - name: Upload log
      uses: actions/upload-artifact@v4
      with:
        name: brew-install-log
        path: install-${{github.ref_name}}.log
        retention-days: 5